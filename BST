/*write a c++ program for Beginning with an empty binary search tree. Construct binary search tree by inserting the values in the order given.
After constructing a binary tree - i. Insert new node ii. Find number of nodes in longest path from root iii. Minimum
data value found in the tree
iv. Change a tree so that the roles of the left and right pointers are swapped at every node
v. Search a value*/


#include <iostream>
using namespace std;

// Binary Search Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};

// Function to create a new node
Node* createNode(int value) {
    Node* newNode = new Node();
    if (!newNode) {
        cout << "Memory error!\n";
        return NULL;
    }
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the binary search tree
Node* insertNode(Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }
    return root;
}

// Function to find the number of nodes in the longest path from the root
int findLongestPath(Node* root) {
    if (root == NULL) {
        return 0;
    }
    int leftPath = findLongestPath(root->left);
    int rightPath = findLongestPath(root->right);
    return max(leftPath, rightPath) + 1;
}

// Function to find the minimum data value in the tree
int findMinimumValue(Node* root) {
    if (root == NULL) {
        cout << "Tree is empty!\n";
        return INT_MAX;
    }
    while (root->left != NULL) {
        root = root->left;
    }
    return root->data;
}

// Function to swap the left and right pointers at every node
void swapPointers(Node* root) {
    if (root == NULL) {
        return;
    }
    swap(root->left, root->right);
    swapPointers(root->left);
    swapPointers(root->right);
}

// Function to search for a value in the binary search tree
bool searchValue(Node* root, int value) {
    if (root == NULL) {
        return false;
    }
    if (root->data == value) {
        return true;
    }
    if (value < root->data) {
        return searchValue(root->left, value);
    } else {
        return searchValue(root->right, value);
    }
}

// Function to display the binary search tree in inorder traversal
void inorderTraversal(Node* root) {
    if (root == NULL) {
        return;
    }
    inorderTraversal(root->left);
    cout << root->data << " ";
    inorderTraversal(root->right);
}

int main() {
    Node* root = NULL;
    int choice, value;

    do {
        cout << "\n1. Insert a new node"
             << "\n2. Find the number of nodes in the longest path from root"
             << "\n3. Find the minimum data value in the tree"
             << "\n4. Swap the left and right pointers at every node"
             << "\n5. Search for a value"
             << "\n6. Exit"
             << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the value to be inserted: ";
                cin >> value;
                root = insertNode(root, value);
                break;
            case 2:
                cout << "Number of nodes in the longest path from root: " << findLongestPath(root) << endl;
                break;
            case 3
